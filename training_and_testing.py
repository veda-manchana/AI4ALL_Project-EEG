# -*- coding: utf-8 -*-
"""Training_and_testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IVnrnFA8GEJ8M72FfElESieXvmcdI_Ey
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import pandas as pd

# Path to folder with cleaned CSVs
folder_path = "/content/drive/My Drive/AI4ALL PROJECT/CLEANED"

# Create an empty list to store individual DataFrames
df_list = []

# Loop through all CSV files and append to list
for file in os.listdir(folder_path):
    if file.endswith('.csv'):
        file_path = os.path.join(folder_path, file)
        df = pd.read_csv(file_path)

        df_list.append(df)

# Combine all DataFrames
combined_df = pd.concat(df_list, ignore_index=True)

# Display result
print(combined_df.shape)
print(combined_df.head())

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, KFold, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import make_pipeline
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import matplotlib.pyplot as plt

# Positive and negative emotion groups
positive_emotions = ['Satisfaction', 'Funny']
negative_emotions = ['Boredom', 'Calm', 'Horrible']

# EEG channels only
features = ['AF3', 'AF4', 'F3', 'F4', 'F7', 'F8',
            'FC5', 'FC6', 'T7', 'T8', 'P7', 'P8',
            'O1', 'O2']

df = combined_df.copy()

# Create binary label
binary_labels = []
for emotion in df["Emotion"]:
    if emotion in positive_emotions:
        binary_labels.append(1)
    else:
        binary_labels.append(0)
df["BinaryLabel"] = binary_labels

# Define EEG brain regions
frontal = ['AF3', 'AF4', 'F3', 'F4', 'F7', 'F8']
fronto_central = ['FC5', 'FC6']
temporal = ['T7', 'T8']
parietal = ['P7', 'P8']
occipital = ['O1', 'O2']

# Compute variance for each brain region (row-wise)
df["frontal_var"] = df[frontal].var(axis=1)
df["fronto_central_var"] = df[fronto_central].var(axis=1)
df["temporal_var"] = df[temporal].var(axis=1)
df["parietal_var"] = df[parietal].var(axis=1)
df["occipital_var"] = df[occipital].var(axis=1)

# Combine EEG + variance features + extra ratings
final_features = features + [
    "frontal_var",
    "fronto_central_var",
    "temporal_var",
    "parietal_var",
    "occipital_var"
]

X = df[final_features]
y = df["BinaryLabel"]

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, stratify=y, random_state=42, test_size=0.2
)

# Scale
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Random Forest model
rf = RandomForestClassifier(
    n_estimators=100,
    max_depth=20,
    min_samples_split=5,
    class_weight='balanced',
    n_jobs=-1,
    random_state=42
)

rf.fit(X_train_scaled, y_train)
y_pred = rf.predict(X_test_scaled)

# --- Feature Importance ---
importances = rf.feature_importances_

feature_importance_df = pd.DataFrame({
    'Feature': X.columns,
    'Importance': importances
}).sort_values(by='Importance', ascending=False)

print(feature_importance_df)

# Plot feature importance
plt.figure(figsize=(10, 5))
plt.bar(feature_importance_df['Feature'], feature_importance_df['Importance'])
plt.xticks(rotation=45)
plt.ylabel("Importance")
plt.title("Random Forest Feature Importance (EEG + Row Stats)")
plt.tight_layout()
plt.show()

# Evaluation
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
print("\nAccuracy:", accuracy_score(y_test, y_pred))

# Cross-validation
pipeline = make_pipeline(StandardScaler(), rf)
kf = KFold(n_splits=5, shuffle=True, random_state=42)
cv_scores = cross_val_score(pipeline, X, y, cv=kf, scoring='accuracy', n_jobs=-1)

print("Cross-Validation Accuracies:", cv_scores)
print("Mean CV Accuracy:", np.mean(cv_scores))
print("Standard Deviation:", np.std(cv_scores))

import joblib

# Save the model
joblib.dump(rf, '/content/drive/My Drive/EEG_RF_Model.pkl')

# Save the scaler as well
joblib.dump(scaler, '/content/drive/My Drive/EEG_Scaler.pkl')

import matplotlib.pyplot as plt

# Count samples per emotion
emotion_counts = combined_df["Emotion"].value_counts()

# Plot
plt.figure(figsize=(8, 6))
bars = plt.bar(emotion_counts.index, emotion_counts.values,
               color=["skyblue", "lightgreen", "orange", "red"])  # Adjust colors if needed

# Add labels on top of bars
for bar, count in zip(bars, emotion_counts.values):
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 2000,
             f"{count:,}", ha='center', fontsize=12)

plt.title("Emotion Class Distribution")
plt.ylabel("Number of Samples")
plt.xlabel("Emotion")
plt.tight_layout()
plt.show()